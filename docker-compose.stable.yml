services:
  # ============================================================================
  # SRT Test Listener (receives standard instance streams for testing)
  # ============================================================================
  srt-test-listener:
    image: linuxserver/ffmpeg:latest
    container_name: srt-test-listener
    volumes:
      - ./out:/out
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        mkdir -p /out
        ffmpeg -hide_banner -loglevel info -nostdin -y -i "srt://0.0.0.0:9001?mode=listener" -c copy -f mpegts /out/std1.ts &
        ffmpeg -hide_banner -loglevel info -nostdin -y -i "srt://0.0.0.0:9002?mode=listener" -c copy -f mpegts /out/std2.ts &
        ffmpeg -hide_banner -loglevel info -nostdin -y -i "srt://0.0.0.0:9003?mode=listener" -c copy -f mpegts /out/std3.ts &
        ffmpeg -hide_banner -loglevel info -nostdin -y -i "srt://0.0.0.0:9004?mode=listener" -c copy -f mpegts /out/std4.ts &
        wait
    healthcheck:
      test: ["CMD-SHELL", "pgrep ffmpeg || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # ============================================================================
  # SRT Ingest Listener (receives final composite)
  # ============================================================================
  srt-ingest:
    image: linuxserver/ffmpeg:latest
    container_name: srt-ingest
    volumes:
      - ./out:/out
    networks:
      - compositor_net
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        mkdir -p /out
        while true; do
          ffmpeg -hide_banner -loglevel info -nostdin -y -i "srt://0.0.0.0:9000?mode=listener" -c copy -f mpegts /out/composite.ts
          echo "SRT connection lost, retrying in 5 seconds..."
          sleep 5
        done
    healthcheck:
      test: ["CMD-SHELL", "pgrep ffmpeg || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  # ============================================================================
  # Compositor (FFmpeg filter_complex: 2 half-width → 1 full HD)
  # ============================================================================
  compositor:
    image: linuxserver/ffmpeg:latest
    container_name: compositor
    networks:
      - compositor_net
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        while true; do
          ffmpeg -hide_banner -loglevel info \
            -fflags +genpts+igndts \
            -i "srt://0.0.0.0:10001?mode=listener&latency=200000" \
            -i "srt://0.0.0.0:10002?mode=listener&latency=200000" \
            -filter_complex "[0:v]fps=30,setpts=N/FRAME_RATE/TB[v0];[1:v]fps=30,setpts=N/FRAME_RATE/TB[v1];[v0][v1]hstack=inputs=2[outv]" \
            -map "[outv]" -map 0:a \
            -async 1 \
            -vsync cfr \
            -r 30 \
            -c:v libx264 -preset ultrafast -tune zerolatency -b:v 3000k -maxrate 3500k -bufsize 6000k -g 30 -keyint_min 30 -sc_threshold 0 \
            -c:a aac -b:a 128k -ar 44100 \
            -f mpegts "${COMPOSITOR_INGEST:-srt://srt-ingest:9000?streamid=composite}"
          echo "Compositor stream ended, retrying in 5 seconds..."
          sleep 5
        done
    healthcheck:
      test: ["CMD-SHELL", "pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: on-failure

  # ============================================================================
  # Half-Width Sources for Compositor (960×1080)
  # ============================================================================
  source-left:
    build: .
    image: page-stream:latest
    container_name: source-left
    volumes:
      - ./demo:/app/demo:ro
    environment:
      - WIDTH=960
      - HEIGHT=1080
      - DISPLAY=${SOURCE_LEFT_DISPLAY:-:99}
      - INPUT_FFMPEG_FLAGS=-thread_queue_size\ 512\ -probesize\ 5M\ -analyzeduration\ 1M
    networks:
      - compositor_net
    # Use SOURCE_LEFT_URL from .env.stable (falls back to demo page if unset)
    # Add input-side ffmpeg tuning flags to make x11grab more robust under VM load
    command:
      - "--extra-ffmpeg"
      - "-thread_queue_size"
      - "512"
      - "-probesize"
      - "5M"
      - "-analyzeduration"
      - "1M"
      - "--ingest"
      - "srt://compositor:10001?streamid=left"
      - "--url"
      - "${SOURCE_LEFT_URL:-file:///app/demo/test-left.html}"
      - "--auto-refresh-seconds"
      - "${DEFAULT_REFRESH_INTERVAL:-3600}"
    healthcheck:
      test: ["CMD-SHELL", "pgrep Xvfb && pgrep chrome && pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: on-failure

  source-right:
    build: .
    image: page-stream:latest
    container_name: source-right
    volumes:
      - ./demo:/app/demo:ro
    environment:
      - WIDTH=960
      - HEIGHT=1080
      - DISPLAY=${SOURCE_RIGHT_DISPLAY:-:100}
      - INPUT_FFMPEG_FLAGS=-thread_queue_size\ 512\ -probesize\ 5M\ -analyzeduration\ 1M
    networks:
      - compositor_net
    # Use SOURCE_RIGHT_URL from .env.stable (falls back to demo page if unset)
    # Add input-side ffmpeg tuning flags to make x11grab more robust under VM load
    command:
      - "--extra-ffmpeg"
      - "-thread_queue_size"
      - "512"
      - "-probesize"
      - "5M"
      - "-analyzeduration"
      - "1M"
      - "--ingest"
      - "srt://compositor:10002?streamid=right"
      - "--url"
      - "${SOURCE_RIGHT_URL:-file:///app/demo/test-right.html}"
      - "--auto-refresh-seconds"
      - "${DEFAULT_REFRESH_INTERVAL:-3600}"
    healthcheck:
      test: ["CMD-SHELL", "pgrep Xvfb && pgrep chrome && pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: on-failure

  # ============================================================================
  # Standard Streaming Instances (1920×1080, isolated from compositor)
  # ============================================================================
  standard-1:
    build: .
    image: page-stream:latest
    container_name: standard-1
    volumes:
      - ./demo:/app/demo:ro
    environment:
      - WIDTH=1920
      - HEIGHT=1080
      - DISPLAY=${STANDARD_1_DISPLAY:-:104}
    # No networks declaration = joins default network only
    depends_on:
      srt-test-listener:
        condition: service_healthy
    # Use STANDARD_1_URL from .env.stable (falls back to demo page if unset)
    command: "--ingest ${STANDARD_1_INGEST:-srt://srt-test-listener:9001?streamid=std1} --url ${STANDARD_1_URL:-file:///app/demo/test-standard.html} --auto-refresh-seconds ${DEFAULT_REFRESH_INTERVAL:-3600}"
    healthcheck:
      test: ["CMD-SHELL", "pgrep Xvfb && pgrep chrome && pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  standard-2:
    build: .
    image: page-stream:latest
    container_name: standard-2
    volumes:
      - ./demo:/app/demo:ro
    environment:
      - WIDTH=1920
      - HEIGHT=1080
      - DISPLAY=${STANDARD_2_DISPLAY:-:105}
    depends_on:
      srt-test-listener:
        condition: service_healthy
    # Use STANDARD_2_URL from .env.stable (falls back to demo page if unset)
    command: "--ingest ${STANDARD_2_INGEST:-srt://srt-test-listener:9002?streamid=std2} --url ${STANDARD_2_URL:-file:///app/demo/test-standard.html} --auto-refresh-seconds ${DEFAULT_REFRESH_INTERVAL:-3600}"
    healthcheck:
      test: ["CMD-SHELL", "pgrep Xvfb && pgrep chrome && pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  standard-3:
    build: .
    image: page-stream:latest
    container_name: standard-3
    volumes:
      - ./demo:/app/demo:ro
    environment:
      - WIDTH=1920
      - HEIGHT=1080
      - DISPLAY=${STANDARD_3_DISPLAY:-:106}
    depends_on:
      srt-test-listener:
        condition: service_healthy
    # Use STANDARD_3_URL from .env.stable (falls back to demo page if unset)
    command: "--ingest ${STANDARD_3_INGEST:-srt://srt-test-listener:9003?streamid=std3} --url ${STANDARD_3_URL:-file:///app/demo/test-standard.html} --auto-refresh-seconds ${DEFAULT_REFRESH_INTERVAL:-3600}"
    healthcheck:
      test: ["CMD-SHELL", "pgrep Xvfb && pgrep chrome && pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    dns:
      - 8.8.8.8
      - 1.1.1.1

  standard-4:
    build: .
    image: page-stream:latest
    container_name: standard-4
    volumes:
      - ./demo:/app/demo:ro
    environment:
      - WIDTH=1920
      - HEIGHT=1080
      - DISPLAY=${STANDARD_4_DISPLAY:-:107}
    depends_on:
      srt-test-listener:
        condition: service_healthy
    # Use STANDARD_4_URL from .env.stable (falls back to demo page if unset)
    command: "--ingest ${STANDARD_4_INGEST:-srt://srt-test-listener:9004?streamid=std4} --url ${STANDARD_4_URL:-file:///app/demo/test-standard.html} --auto-refresh-seconds ${DEFAULT_REFRESH_INTERVAL:-3600}"
    healthcheck:
      test: ["CMD-SHELL", "pgrep Xvfb && pgrep chrome && pgrep ffmpeg"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    restart: unless-stopped

networks:
  compositor_net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-compositor
